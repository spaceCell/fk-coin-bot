import logging
import os
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    BotCommand
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

from db_layer import init_db, get_user, create_user, update_user_day, finish_user, save_progress, get_progress
from quests import QUESTS, TOTAL_DAYS

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ .env")

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
MAIN_KEYBOARD = ReplyKeyboardMarkup(
    [
        ["üéØ –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ"],
        ["üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", "üìì –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã"],
        ["üåá –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É"]
    ],
    resize_keyboard=True
)

# === /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    create_user(user_id)

    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç!\n\n"
        "–≠—Ç–æ –∫–≤–µ—Å—Ç *7 –¥–Ω–µ–π –±–µ–∑ –¥–µ–Ω–µ–≥*.\n"
        "–¢—ã –ø—Ä–æ–∂–∏–≤—ë—à—å –Ω–µ–¥–µ–ª—é –≤ –≥–æ—Ä–æ–¥–µ, –≤—ã–ø–æ–ª–Ω—è—è –∑–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–∑–≤–∏–≤–∞—é—Ç –≤—ã–∂–∏–≤–∞–Ω–∏–µ, –∫—Ä–µ–∞—Ç–∏–≤ –∏ —Å–≤–æ–±–æ–¥—É.\n\n"
        "–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å?",
        reply_markup=ReplyKeyboardMarkup([["üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É"]], resize_keyboard=True),
        parse_mode="Markdown"
    )

# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ===
async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    user_id = update.effective_user.id

    if text == "üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É":
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!",
            reply_markup=MAIN_KEYBOARD
        )

    elif text == "üéØ –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ":
        await give_task(update, context)

    elif text == "‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ":
        await update.message.reply_text(
            "–†–∞—Å—Å–∫–∞–∂–∏ –∫–æ—Ä–æ—Ç–∫–æ, —á—Ç–æ —Ç—ã —Å–¥–µ–ª–∞–ª:",
            reply_markup=ReplyKeyboardRemove()
        )
        context.user_data["waiting_for_report"] = True

    elif text == "üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å":
        await show_progress(update, context)

    elif text == "üìì –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã":
        await update.message.reply_text(
            "üìì *–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã*\n\n"
            "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ.\n"
            "–í—ã–ø–æ–ª–Ω—è–µ—à—å ‚Üí –ø–∏—à–µ—à—å –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç—á—ë—Ç ‚Üí –ø–µ—Ä–µ—Ö–æ–¥–∏—à—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É.\n"
            "–í—Å–µ–≥–æ 7 –¥–Ω–µ–π.\n\n"
            "–ú–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.",
            parse_mode="Markdown"
        )

    elif text == "üåá –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É":
        finish_user(user_id)
        await update.message.reply_text(
            "üåá –¢—ã –∑–∞–≤–µ—Ä—à–∏–ª –∏–≥—Ä—É. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!\n\n"
            "–•–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ? –ù–∞–∂–º–∏ /start"
        )

    else:
        # –ï—Å–ª–∏ –∂–¥—ë–º –æ—Ç—á—ë—Ç
        if context.user_data.get("waiting_for_report"):
            await save_report(update, context)
        else:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é!")

# === –í—ã–¥–∞—á–∞ –∑–∞–¥–∞–Ω–∏—è ===
async def give_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = get_user(user_id)

    if not user:
        create_user(user_id)
        user = get_user(user_id)

    current_day = user[1]
    is_finished = user[2]

    if is_finished:
        await update.message.reply_text(
            "‚úÖ –¢—ã —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª 7-–¥–Ω–µ–≤–Ω—ã–π –∫–≤–µ—Å—Ç!\n"
            "–•–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ? –ù–∞–∂–º–∏ /start"
        )
        return

    next_day = current_day + 1
    if next_day > TOTAL_DAYS:
        finish_user(user_id)
        await update.message.reply_text(
            "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –ø—Ä–æ—à—ë–ª –≤—Å–µ 7 –¥–Ω–µ–π!\n\n"
            "–¢—ã –ø–æ–±–µ–¥–∏–ª —Å–∏—Å—Ç–µ–º—É –Ω–∞ 7 –¥–Ω–µ–π. –°–≤–æ–±–æ–¥–∞ –≤–æ–∑–º–æ–∂–Ω–∞.\n\n"
            "üîÑ –ú–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /start –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–≥–æ–º!"
        )
        return

    # –í—ã–¥–∞—ë–º –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
    task, goal = QUESTS[next_day]
    await update.message.reply_text(
        f"üìÖ *–î–µ–Ω—å {next_day}/{TOTAL_DAYS}*\n\n"
        f"üéØ *–ó–∞–¥–∞–Ω–∏–µ:* {task}\n"
        f"üéØ *–¶–µ–ª—å:* {goal}\n\n"
        "–ö–æ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω–∏—à—å ‚Äì –Ω–∞–∂–º–∏ ‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.",
        parse_mode="Markdown",
        reply_markup=ReplyKeyboardMarkup([["‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"]], resize_keyboard=True)
    )

    update_user_day(user_id, next_day)

# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ ===
async def save_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = get_user(user_id)

    if not user:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏ –∏–≥—Ä—É: /start")
        return

    current_day = user[1]
    text = update.message.text.strip()

    save_progress(user_id, current_day, text)
    context.user_data["waiting_for_report"] = False

    await update.message.reply_text(
        "‚úÖ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞.\n\n"
        "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é.",
        reply_markup=MAIN_KEYBOARD
    )

# === –ü—Ä–æ–≥—Ä–µ—Å—Å ===
async def show_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = get_user(user_id)

    if not user:
        await update.message.reply_text("–¢—ã –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª –∏–≥—Ä—É. –ù–∞–∂–º–∏ /start.")
        return

    current_day = user[1]
    rows = get_progress(user_id)

    done_days = [day for day, _ in rows]
    total = TOTAL_DAYS

    progress_text = f"üìä *–¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å*\n\nüìÖ –î–µ–Ω—å {current_day} –∏–∑ {total}\n\n"
    for d in range(1, total + 1):
        if d in done_days:
            progress_text += f"‚úÖ –î–µ–Ω—å {d} ‚Äî {QUESTS[d][0][:30]}...\n"
        elif d == current_day:
            progress_text += f"‚è≥ –î–µ–Ω—å {d} ‚Äî {QUESTS[d][0][:30]}...\n"
        else:
            progress_text += f"‚ùå –î–µ–Ω—å {d} ‚Äî –µ—â—ë –Ω–µ –ø—Ä–æ–π–¥–µ–Ω\n"

    await update.message.reply_text(progress_text, parse_mode="Markdown")

# === –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ ===
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.error("–û—à–∏–±–∫–∞:", exc_info=context.error)
    if isinstance(update, Update) and update.effective_message:
        await update.effective_message.reply_text("‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
def main():
    init_db()
    app = Application.builder().token(BOT_TOKEN).build()

    async def on_startup(app: Application):
        await app.bot.set_my_commands([
            BotCommand("start", "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É"),
            BotCommand("progress", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å"),
            BotCommand("rules", "–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã")
        ])

    app.post_init = on_startup

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("progress", show_progress))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu))
    app.add_error_handler(error_handler)

    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω‚Ä¶")
    app.run_polling()

if __name__ == "__main__":
    main()
